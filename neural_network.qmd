---
title: "womens_fb_nn"
format: html
editor: visual
---

# Setup

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(tidymodels)
library(discrim, exclude = "smoothness")
library(MASS, exclude = "select")
library(Matrix, exclude = c("expand", "pack", "unpack"))
library(keras, exclude = "get_weights")
library(magrittr, exclude = c("set_names", "extract"))

cl <- parallel::makePSOCKcluster(parallel::detectCores(logical = FALSE))
doParallel::registerDoParallel(cl)

path_data <- "data"
```

# Reading data

```{r}
data_full <- read_csv(here::here(path_data, "sentiment_women_v2.csv"), show_col_types = FALSE)
```

```{r}
skimr::skim(data_full)
```

# Splits

```{r}
# seed set for reproducibility
set.seed(12345)

data <- data_full |>
  select(statistics.actual.likeCount:account.name, account.subscriberCount, 
         # account.pageCategory, 
         time_posted, message_score:description_binary)

splits <- data |> initial_split(prop = 2/3, strata = "statistics.actual.likeCount", breaks = 3)

data_trn <- splits |> analysis() |> glimpse()
  
data_test <- splits |> assessment()
```

# Data prep

```{r}
skimr::skim(data_trn)

data_trn <- data_trn |>
  mutate(across(where(is.character), factor))
```

# Fit models

## Prep and bake

```{r}
#| message: false
#| warning: false

rec <- recipe(statistics.actual.likeCount ~ ., data = data_trn) |>
  step_zv(all_predictors()) |>
  step_normalize(all_numeric_predictors()) |>
  step_dummy(all_factor_predictors()) |>
  step_pca(all_predictors()) #decorrelating

rec_prep <- rec |>
  prep(data_trn)

feat_trn <- rec_prep |>
  bake(NULL)
```

# Model fitting

```{r}
set.seed(12345)
fit_seeds <- sample.int(10^5, size = 3)

fit_nn <- 
  mlp(hidden_units = 50, activation = "relu", dropout = 0.2) |>
  set_mode("regression") |> 
  set_engine("keras", verbose = 0, seeds = fit_seeds) |>
  fit(statistics.actual.likeCount ~ ., data = feat_trn)
```

```{r}
feat_test <- rec_prep |> bake(data_test)


(estimate = predict(fit_nn, feat_test)$.pred)

test_preds <- predict(fit_nn, new_data = feat_test) %>%
  bind_cols(data_test %>% select(statistics.actual.likeCount))

test_metrics <- test_preds %>%
  metrics(truth = statistics.actual.likeCount, estimate = .pred)

nn_test_rmse <- rmse_vec(truth = feat_test$statistics.actual.likeCount, 
                           estimate = predict(fit_nn, feat_test)$.pred)
```
